# .functions - doesn't use a shebang
# This file should be sourced by .zshrc

# System Maintenance
update() {
  echo "Updating macOS..."
  sudo softwareupdate -i -a

  if command -v brew >/dev/null; then
    echo "Updating Homebrew..."
    brew update
    brew upgrade
    brew cleanup
  fi

  if command -v npm >/dev/null; then
    echo "Updating npm..."
    npm update -g
  fi
}

cleanup() {
  find . -type f -name '.DS_Store' -delete
  find . -type f -name '*.py[co]' -delete
  find . -type d -name '__pycache__' -delete
}

emptytrash() {
  local TRASH_LOCATIONS=(
    "/Volumes/*/.Trashes"
    "~/.Trash"
    "/private/var/log/asl/*.asl"
  )

  for location in "${TRASH_LOCATIONS[@]}"; do
    sudo rm -rfv $location
  done

  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'
  echo "Trash emptied"
}

# Finder
toggle_hidden_files() {
  local value="$1"
  if [[ "$value" != "TRUE" && "$value" != "FALSE" ]]; then
    echo "Usage: toggle_hidden_files TRUE/FALSE"
    return 1
  fi
  defaults write com.apple.finder AppleShowAllFiles "$value"
  killall Finder
}

toggle_desktop() {
  local value="$1"
  if [[ "$value" != "true" && "$value" != "false" ]]; then
    echo "Usage: toggle_desktop true/false"
    return 1
  fi
  defaults write com.apple.finder CreateDesktop -bool "$value"
  killall Finder
}

# Docker Management
docker_cleanup() {
  echo "Stopping all containers..."
  docker stop "$(docker ps -aq)"

  echo "Removing stopped containers..."
  docker rm "$(docker ps -aq)"

  echo "Removing unused images..."
  docker image prune -af

  echo "Removing unused volumes..."
  docker volume prune -f

  echo "Removing unused networks..."
  docker network prune -f
}

# DNS
flush_dns() {
  sudo dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
  echo "DNS cache flushed"
}

# Spotlight
spotlight() {
  case "$1" in
  on)
    sudo mdutil -a -i on
    ;;
  off)
    sudo mdutil -a -i off
    ;;
  *)
    echo "Usage: spotlight on|off"
    return 1
    ;;
  esac
}

# Create directory and cd into it
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Extract common archive formats
extract() {
  if [ -f "$1" ]; then
    case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.gz) tar xzf "$1" ;;
    *.tar.xz) tar xJf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) unrar x "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xf "$1" ;;
    *.tbz2) tar xjf "$1" ;;
    *.tgz) tar xzf "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "'$1' cannot be extracted via extract" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
